services:

  product-service:
    container_name: product-service-prod
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    restart: on-failure
    depends_on:
      - product-db
      - discovery-server
      - config-server
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-db:5432/ExampleProductDB
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=test

  customer-service:
    container_name: customer-service-prod
    build:
      context: ./CustomerService
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    restart: on-failure
    depends_on:
      - discovery-server
      - config-server
      - customer-db
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
      - SPRING_DATASOURCE_URL=jdbc:postgresql://customer-db:5432/ExampleCustomerDB
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=test

  order-service:
    container_name: order-service-prod
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    restart: on-failure
    depends_on:
      - order-db
      - discovery-server
      - config-server
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079

  elasticsearch-service:
    build:
      context: ./ElasticSearch
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    restart: on-failure
    depends_on:
      - discovery-server
      - config-server
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka/

  kafka-producer-service:
    build:
      context: ./kafka-procuder
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      - discovery-server
      - config-server
      - kafka
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka/


  kafka-consumer-service:
    build:
      context: ./kafka-consumer
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    restart: on-failure
    depends_on:
      - discovery-server
      - config-server
      - kafka
    networks:
      - common
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8888/eureka/


  config-server:
    build:
      context: ./ConfigServer
      dockerfile: Dockerfile
    ports:
      - "8079:8079"
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/oguzhansecgel/MicroserviceExample-Configuration
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START=true
    networks:
      - common

  discovery-server:
    build:
      context: ./DiscoveryServer
    ports:
      - "8888:8888"
    restart: on-failure
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - common
  gateway-server:
    build:
      context: ./GatewayServer
    ports:
      - "8086:8086"
    restart: on-failure
    depends_on:
      - discovery-server
      - config-server
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE=prod
      - CONFIGURL=http://config-server:8079
    networks:
      - common

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - common

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENER_NAMES: INSIDE,OUTSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    networks:
      - common

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch-cluster
      - discovery.seed_hosts=elasticsearch
      - cluster.initial_master_nodes=elasticsearch
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - common
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1

  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    networks:
      - common

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - common

  product-db:
    image: postgres
    container_name: product-db-prod
    environment:
      POSTGRES_DB: ExampleProductDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
    ports:
      - "5438:5432"
    volumes:
      - product_data_prod:/var/lib/postgresql/data
    networks:
      - common

  customer-db:
    image: postgres
    container_name: customer-db-prod
    environment:
      POSTGRES_DB: ExampleCustomerDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test
    ports:
      - "5439:5432"
    volumes:
      - customer_data_prod:/var/lib/postgresql/data
    networks:
      - common

  order-db:
    image: mongo:latest
    container_name: cart-db-prod
    ports:
      - "27030:27017"
    volumes:
      - order_data_prod:/data/db
    networks:
      - common


networks:
  common:
    driver: bridge

volumes:
  elasticsearch-data:
    driver: local
  kibana-data:
    driver: local
  product_data_prod:
    driver: local
  customer_data_prod:
    driver: local
  order_data_prod:
    driver: local